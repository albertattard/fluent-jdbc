package github.albertattard.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Objects;
import java.util.Optional;

public class FluentPreparedStatement {

    private final FluentConnection database;
    private final String query;
    private final SqlConsumer<PreparedStatement> consumer;

    public FluentPreparedStatement withLongParameter(final long parameter) {
        return withParameters(preparedStatement -> {
            preparedStatement.setLong(1, parameter);
        });
    }

    public FluentPreparedStatement withStringParameter(final String parameter) {
        return withParameters(preparedStatement -> {
            preparedStatement.setString(1, parameter);
        });
    }

    public FluentPreparedStatement withParameters(final SqlConsumer<PreparedStatement> consumer) {
        return new FluentPreparedStatement(database, query, consumer);
    }

    public int executeUpdate() {
        return withPreparedStatement(preparedStatement -> {
            consumer.accept(preparedStatement);
            return preparedStatement.executeUpdate();
        });
    }

    public <T> T single(final SqlFunction<ResultSet, T> function) {
        return withResultSet(resultSet -> FluentResultSet.of(resultSet).single(function));
    }

    public long singleLong() {
        return single(resultSet -> resultSet.getLong(1));
    }

    public <T> Optional<T> optional(final SqlFunction<ResultSet, T> function) {
        return withResultSet(resultSet -> FluentResultSet.of(resultSet).optional(function));
    }

    public long autoGeneratedKeys() {
        return autoGeneratedKeys(resultSet -> resultSet.getLong(1));
    }

    public <T> T autoGeneratedKeys(final SqlFunction<ResultSet, T> function) {
        return database.withConnection(connection -> {
            try (final PreparedStatement preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
                consumer.accept(preparedStatement);
                preparedStatement.executeUpdate();

                try (final ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                    if (resultSet.next()) {
                        return function.apply(resultSet);
                    }
                } catch (final SQLException e) {
                    throw new RuntimeException("Failed to retrieve the auto generated id");
                }

                throw new RuntimeException("No auto generated id found");
            } catch (final SQLException e) {
                throw new RuntimeException("Failed to execute query and return the auto generated id");
            }
        });
    }

    private <T> T withResultSet(final SqlFunction<ResultSet, T> function) {
        return withPreparedStatement(preparedStatement -> {
            consumer.accept(preparedStatement);
            try (final ResultSet resultSet = preparedStatement.executeQuery()) {
                return function.apply(resultSet);
            } catch (final SQLException e) {
                throw new RuntimeException("Failed to retrieve data from result set", e);
            }
        });
    }

    private <T> T withPreparedStatement(final SqlFunction<PreparedStatement, T> function) {
        return database.withConnection(connection -> {
            try (final PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                return function.apply(preparedStatement);
            } catch (final SQLException e) {
                throw new RuntimeException("Failed to execute query", e);
            }
        });
    }

    public static FluentPreparedStatement of(final FluentConnection database, final String query) {
        return new FluentPreparedStatement(Objects.requireNonNull(database), Objects.requireNonNull(query));
    }

    private FluentPreparedStatement(final FluentConnection database, final String query) {
        this(database, query, SqlConsumer.blank());
    }

    private FluentPreparedStatement(final FluentConnection database, final String query, final SqlConsumer<PreparedStatement> consumer) {
        this.database = Objects.requireNonNull(database);
        this.query = Objects.requireNonNull(query);
        this.consumer = Objects.requireNonNull(consumer);
    }
}